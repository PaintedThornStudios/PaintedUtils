using UnityEngine;
using TMPro;
using System.Collections.Generic;

namespace MCZombieMod.AI;

public class EnemyDebugDisplay : MonoBehaviour
{
    [Header("Debug Text References")]
    [SerializeField] private TextMeshPro stateDebugText;
    [SerializeField] private TextMeshPro animDebugText;
    [SerializeField] private EnemyMCZombie _zombieController;
    [SerializeField] private EnemyMCZombieAnim _zombieAnimator;

    [Header("Text Settings")]
    [SerializeField] private Color stateTextColor = Color.white;
    [SerializeField] private Color animTextColor = Color.yellow;
    [SerializeField] private float textScale = 0.1f;
    [SerializeField] private float verticalOffset = 2f;
    [SerializeField] private float textSpacing = 0.5f;

    private Transform _zombieTransform;
    private Camera _mainCamera;

    private void Awake()
    {
        // Get references from parent instead of this GameObject
        _zombieTransform = transform.parent;
        if (_zombieTransform != null)
        {
           Debug.Log("Zombie Transform Found");
           if (_zombieController == null)
           {
            Debug.Log("Zombie Controller Not Found");
            return;
           }
           if (_zombieAnimator == null)
           {
            Debug.Log("Zombie Animator Not Found");
            return;
           }
        }
        
        _mainCamera = Camera.main;

        // Set up text components if they exist
        if (stateDebugText != null)
        {
            SetupTextMesh(stateDebugText, stateTextColor);
        }

        if (animDebugText != null)
        {
            SetupTextMesh(animDebugText, animTextColor);
            // Position anim text below state text
            animDebugText.transform.localPosition = new Vector3(0, verticalOffset - textSpacing, 0);
        }
    }

    private void SetupTextMesh(TextMeshPro text, Color color)
    {
        text.color = color;
        text.transform.localScale = Vector3.one * textScale;
        text.transform.localPosition = new Vector3(0, verticalOffset, 0);
        text.alignment = TextAlignmentOptions.Center;
        text.sortingOrder = 999;

        // Clone the material and override render settings
        Material overlayMat = new Material(text.fontSharedMaterial);
        overlayMat.renderQueue = 4000; // Force top rendering (Overlay queue)
        overlayMat.SetInt("_ZTestMode", (int)UnityEngine.Rendering.CompareFunction.Always); // Ignore depth

        text.fontMaterial = overlayMat;

        text.ForceMeshUpdate();
    }


    private void LateUpdate()
    {

        if (_mainCamera == null || _zombieTransform == null) return;

        // Update state debug text
        if (stateDebugText != null && _zombieController != null)
        {
            string stateText = "";
            if (_zombieController.Enemy != null)
            {
                stateText += $"Zombie: {_zombieController.Enemy.name}\n";
            }
            stateText += $"State: {_zombieController.currentState}\n";
            stateText += $"Interest: {_zombieController.CurrentInterest:F2}\n";
            
            if (_zombieController._targetPlayer != null)
            {
                stateText += $"Target: {_zombieController._targetPlayer.name}\n";
                float distance = Vector3.Distance(_zombieController.transform.position, _zombieController._targetPlayer.transform.position);
                stateText += $"Distance: {distance:F1}m";
            }
            
            stateDebugText.text = stateText;
            UpdateTextRotation(stateDebugText.transform);
        }

        // Update animation debug text
        if (animDebugText != null && _zombieAnimator != null && _zombieAnimator.AvailableAnimValues != null)
        {
            string animText = "Animation Values:\n";
            foreach (var value in _zombieAnimator.AvailableAnimValues)
            {
                if (!value.enabled) continue;

                switch (value.type)
                {
                    case EnemyMCZombieAnim.AnimValueType.Float:
                        float floatValue = _zombieAnimator.animator.GetFloat(value.name);
                        animText += $"{value.name}: {floatValue:F2}\n";
                        break;
                    case EnemyMCZombieAnim.AnimValueType.Bool:
                        animText += $"{value.name}: {_zombieAnimator.animator.GetBool(value.name)}\n";
                        break;
                    case EnemyMCZombieAnim.AnimValueType.Int:
                        animText += $"{value.name}: {_zombieAnimator.animator.GetInteger(value.name)}\n";
                        break;
                }
            }
            
            animDebugText.text = animText;
            UpdateTextRotation(animDebugText.transform);
        }
    }

    private void UpdateTextRotation(Transform textTransform)
    {
        if (_mainCamera == null) return;

        Vector3 camForward = _mainCamera.transform.rotation * Vector3.forward;
        Vector3 camUp = _mainCamera.transform.rotation * Vector3.up;

        textTransform.LookAt(textTransform.position + camForward, camUp);
    }


} 